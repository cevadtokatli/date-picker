import * as V from './value';
import {Lang} from './lang';
import {Options} from './options';

export declare class DatePicker {
    value: V.Value;
	initialValue: V.Value;
	tmpValue: V.TmpValue;
	tmpYearValue: V.TmpYearValue;
	tmpYearRangeValue: V.TmpYearRangeValue;
	page: String;
	datePage: String;
	el: HTMLElement;
	parentEl: HTMLElement;
	inputEl: HTMLInputElement;
	toggleEl: HTMLElement;
	els: {[key:String]: HTMLElement};
	type: String;
	dateType: String;
	hourType: String;
	pickerOpen: Boolean;
	allowEmpty: Boolean;
	inputToggle: Boolean;
	showButtons: Boolean;
	orientation: Boolean;
	showArrowButtons: Boolean;
    static LANG: {[key:String]: Lang};

    constructor(o:Options);
    extractAttributes(o:Options): Options;
	renderMonth(): void;
	renderYear(): void;
	renderYearRange(): void;
	renderUpIcon(): String;
	renderDownIcon(): String;
	changeInput(): void;
	changeHourInput(): void;
	changeMinuteInput(): void;
	changeAMInput(): void;
	changePage(): void;
    changeDatePage(val:String): void;
	focusHoursInput(e:Event): void;
    leaveHoursInput(e:Event): void;
    resetDate(): void;
	resetDatePage(): void;
	resetHourPage(): void;
	wheelHourInput(e:Event): void;
	wheelMinuteInput(e:Event): void;
	wheelAMInput(): void;
	get(): V.Value;
    getValueText(value:V.Value): String;
    getWeekDay(d:Date): Number;
	set(val:String|Number|Date): void;
	setValue(value:String|Number|Date): V.Value;
	setEmptyValue(): void;
	setInvalidValue(): void;
	setDay(day:Number, month:Number, year:Number, txt?:Boolean): void;
    setActiveDayClass(): void;
	setTmpMonth(month:Number, year:Number): void;
    setTmpYear(year:Number): void;
	setActiveMonthClass(): void;
	setTmpYearRange(start:Number): void;
    setActiveYearClass(): void;
	setHour(hour:Number, input?:Boolean, txt?:Boolean): void;
	setMinute(minute:Number, input?:Boolean, txt?:Boolean): void;
	setAM(am:Boolean, input?:Boolean, txt?:Boolean): void;
	setInputText(): void;
	setSpanText(): void;
	setDateSpanText(): void;
	setPageAnimation(o:HTMLElement, n:HTMLElement, a:String, b:String): void;
	setPosition(): void;
	increaseDateValue(e:Event): void;
	decreaseDateValue(e:Event): void;
	createDayCont(): HTMLUListElement;
	createDayEl(d:Number, m:Number, y:Number, muted:Boolean): HTMLLIElement;
	clickWindow(e:Event): void;
	clickCross(): void;
	isOpen(): Boolean;
	open(): void;
	close(): void;
	toggle(): void;
	save(): void;
	cancel(): void;
	destroy(): void;
	static createLanguage(name:String, lang:Lang): void;
}
